/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.grupomult.api.controllers;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.grupomult.api.entities.ResponseDeleteCarros;
import br.com.grupomult.api.entities.ResponseGetCarros;
import br.com.grupomult.api.entities.ResponseGetCarrosById;
import br.com.grupomult.api.entities.ResponsePostCarros;
import br.com.grupomult.api.entities.ResponsePutCarros;
import br.com.grupomult.models.CarroModel;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-24T09:54:30.379-02:00")

@Api(value = "carros", description = "the carros API")
public interface CarrosApi {

    Logger log = LoggerFactory.getLogger(CarrosApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Adiciona um novo carro", nickname = "adicionaCarro", notes = "Inclui um novo carro retornando a URI de acesso ao recurso", response = ResponsePostCarros.class, tags={ "Carros", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Carro adicionado com sucesso", response = ResponsePostCarros.class),
        @ApiResponse(code = 405, message = "Entrada inválida"),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/carros",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponsePostCarros> adicionaCarro(@ApiParam(value = "Objeto do tipo carro que será adicionado" ,required=true )  @Valid @RequestBody CarroModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"carro\" : {    \"codigo\" : 6,    \"tipo\" : 1,    \"dataAtualizacao\" : \"dataAtualizacao\",    \"id\" : 0,    \"dataCriacao\" : \"dataCriacao\",    \"descricao\" : \"descricao\"  },  \"uri\" : \"uri\"}", ResponsePostCarros.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CarrosApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Atualiza um carro existente.", nickname = "atualizaCarro", notes = "Atualiza um novo carro retornando a URI de acesso ao recurso", response = ResponsePutCarros.class, tags={ "Carros", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Carro atualizado com sucesso", response = ResponsePutCarros.class),
        @ApiResponse(code = 405, message = "Entrada inválida"),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/carros/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ResponsePutCarros> atualizaCarro(@ApiParam(value = "",required=true) @PathVariable("id") Long id,@ApiParam(value = "Objeto do tipo carro que será atualizado" ,required=true )  @Valid @RequestBody CarroModel body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"carro\" : {    \"codigo\" : 6,    \"tipo\" : {      \"codigo\" : 5,      \"id\" : 1,      \"descricao\" : \"descricao\"    },    \"dataAtualizacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 0,    \"dataCriacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"descricao\" : \"descricao\"  },  \"uri\" : \"uri\"}", ResponsePutCarros.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CarrosApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Lista um carro específico", nickname = "listCarroPorId", notes = "Lista os detalhes de um carro específico de acordo com o ID.", response = ResponseGetCarrosById.class, tags={ "Carros", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detalhe do carro encontrado", response = ResponseGetCarrosById.class),
        @ApiResponse(code = 404, message = "Nenhum carro encontrado correspondente ao ID informado"),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/carros/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseGetCarrosById> listCarroPorId(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"carro\" : {    \"codigo\" : 6,    \"tipo\" : {      \"codigo\" : 5,      \"id\" : 1,      \"descricao\" : \"descricao\"    },    \"dataAtualizacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 0,    \"dataCriacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"descricao\" : \"descricao\"  }}", ResponseGetCarrosById.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CarrosApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Lista todos os carros cadastrados", nickname = "listaTodosCarros", notes = "Lista todos os detalhes dos carros cadastrados.", response = ResponseGetCarros.class, tags={ "Carros", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Representação dos dados de todos os carros cadastrados.", response = ResponseGetCarros.class),
        @ApiResponse(code = 404, message = "Nenhum carro encontrado"),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/carros",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ResponseGetCarros> listaTodosCarros() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"carros\" : [ {    \"codigo\" : 6,    \"tipo\" : {      \"codigo\" : 5,      \"id\" : 1,      \"descricao\" : \"descricao\"    },    \"dataAtualizacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 0,    \"dataCriacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"descricao\" : \"descricao\"  }, {    \"codigo\" : 6,    \"tipo\" : {      \"codigo\" : 5,      \"id\" : 1,      \"descricao\" : \"descricao\"    },    \"dataAtualizacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 0,    \"dataCriacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"descricao\" : \"descricao\"  } ]}", ResponseGetCarros.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CarrosApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Remove um carro existente", nickname = "removeCarro", notes = "Exclui um novo carro retornando a URI de acesso ao recurso. Nesse caso, ao utiliar a URI será retornado uma resposta 404", response = ResponseDeleteCarros.class, tags={ "Carros", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Carro removido com sucesso", response = ResponseDeleteCarros.class),
        @ApiResponse(code = 405, message = "Entrada inválida"),
        @ApiResponse(code = 500, message = "Erro interno") })
    @RequestMapping(value = "/carros/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<ResponseDeleteCarros> removeCarro(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"carro\" : {    \"codigo\" : 6,    \"tipo\" : {      \"codigo\" : 5,      \"id\" : 1,      \"descricao\" : \"descricao\"    },    \"dataAtualizacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"id\" : 0,    \"dataCriacao\" : \"2000-01-23T04:56:07.000+00:00\",    \"descricao\" : \"descricao\"  },  \"uri\" : \"uri\"}", ResponseDeleteCarros.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CarrosApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
